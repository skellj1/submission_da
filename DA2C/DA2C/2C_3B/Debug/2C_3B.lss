
2C_3B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d3  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000641  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028c  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009a  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int button = 0;

int main(void)
{
    DDRB = 0x04;	// set PORTB.2 to output
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x04;	// turn LED initially off
  94:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00;	// set PORTC.2 to input
  96:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x04;	// set PORTC.2 initially high
  98:	88 b9       	out	0x08, r24	; 8
	
    TCCR0A = 0x02;	// timer0 to operate in CTC mode
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0x05;	// set prescaler to 1024
  9e:	95 e0       	ldi	r25, 0x05	; 5
  a0:	95 bd       	out	0x25, r25	; 37
    
	OCR0A = 0xFF;	// load compare register value
  a2:	9f ef       	ldi	r25, 0xFF	; 255
  a4:	97 bd       	out	0x27, r25	; 39
    
	TIMSK0 = 0x02;	// interrupt enabled on compare match A
  a6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    sei();			// enable interrupts
  aa:	78 94       	sei
			button = 1;	// activates if statement inside interrupt subroutine
		}
		
		else
		{
			PORTB = 0x04; // keeps LED off until button is pressed
  ac:	24 e0       	ldi	r18, 0x04	; 4
    while (1) 
    {
		if (!(PINC & (1<<PINC2)))   // Check PINC for a value of 1 for a value of 1,
		// complemented to check for a zero instead.
		{
			button = 1;	// activates if statement inside interrupt subroutine
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
	TIMSK0 = 0x02;	// interrupt enabled on compare match A
    sei();			// enable interrupts
	
    while (1) 
    {
		if (!(PINC & (1<<PINC2)))   // Check PINC for a value of 1 for a value of 1,
  b2:	32 99       	sbic	0x06, 2	; 6
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <main+0x30>
		// complemented to check for a zero instead.
		{
			button = 1;	// activates if statement inside interrupt subroutine
  b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <main+0x22>
		}
		
		else
		{
			PORTB = 0x04; // keeps LED off until button is pressed
  c0:	25 b9       	out	0x05, r18	; 5
			button = 0;	  // does not enter subroutine if statement
  c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  ca:	f3 cf       	rjmp	.-26     	; 0xb2 <main+0x22>

000000cc <__vector_14>:
    }
	return 0;
}

ISR (TIMER0_COMPA_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	int overflow = 0;			// initialize overflow variable
	int overflow_amt = 76;		// set variable for amount required to achieve
									// desired delay of 1.25 seconds.
	int overflow_check = 0;		// initialize overflow check variable
	
	if (button == 1)
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	d1 f4       	brne	.+52     	; 0x11c <__vector_14+0x50>
	{
		PORTB = 0x00;			// turn on LED if button is pressed
  e8:	15 b8       	out	0x05, r1	; 5
		TCNT0 = 0;				// start timer0 at 0
  ea:	16 bc       	out	0x26, r1	; 38
	return 0;
}

ISR (TIMER0_COMPA_vect)
{
	int overflow = 0;			// initialize overflow variable
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
		{
			overflow_check = TIFR0 & 0x01;	// check for overflow
			if (overflow_check == 1)		// if overflow,
			{
				overflow++;						// increment overflow variable
				TIFR0 = 0x01;					// reset overflow flag
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	0b c0       	rjmp	.+22     	; 0x10a <__vector_14+0x3e>
		TCNT0 = 0;				// start timer0 at 0
		
		while(overflow < overflow_amt)		// keep looping until desired delay is reached
		{
			overflow_check = TIFR0 & 0x01;	// check for overflow
			if (overflow_check == 1)		// if overflow,
  f4:	a8 99       	sbic	0x15, 0	; 21
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__vector_14+0x34>
	if (button == 1)
	{
		PORTB = 0x00;			// turn on LED if button is pressed
		TCNT0 = 0;				// start timer0 at 0
		
		while(overflow < overflow_amt)		// keep looping until desired delay is reached
  f8:	8c 34       	cpi	r24, 0x4C	; 76
  fa:	91 05       	cpc	r25, r1
  fc:	dc f3       	brlt	.-10     	; 0xf4 <__vector_14+0x28>
  fe:	08 c0       	rjmp	.+16     	; 0x110 <__vector_14+0x44>
		{
			overflow_check = TIFR0 & 0x01;	// check for overflow
			if (overflow_check == 1)		// if overflow,
			{
				overflow++;						// increment overflow variable
 100:	01 96       	adiw	r24, 0x01	; 1
				TIFR0 = 0x01;					// reset overflow flag
 102:	25 bb       	out	0x15, r18	; 21
	if (button == 1)
	{
		PORTB = 0x00;			// turn on LED if button is pressed
		TCNT0 = 0;				// start timer0 at 0
		
		while(overflow < overflow_amt)		// keep looping until desired delay is reached
 104:	8c 34       	cpi	r24, 0x4C	; 76
 106:	91 05       	cpc	r25, r1
 108:	19 f0       	breq	.+6      	; 0x110 <__vector_14+0x44>
		{
			overflow_check = TIFR0 & 0x01;	// check for overflow
			if (overflow_check == 1)		// if overflow,
 10a:	a8 9b       	sbis	0x15, 0	; 21
 10c:	f3 cf       	rjmp	.-26     	; 0xf4 <__vector_14+0x28>
 10e:	f8 cf       	rjmp	.-16     	; 0x100 <__vector_14+0x34>
				overflow++;						// increment overflow variable
				TIFR0 = 0x01;					// reset overflow flag
			}
		}
		overflow = 0;							// reset overflow variable to 0
		PORTB = 0x04;							// turn LED off after 1.250 s delay
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	85 b9       	out	0x05, r24	; 5
		button = 0;								// reset button variable to 0
 114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
