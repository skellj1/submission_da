
2C_3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000015c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000148e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRB = 0x04;	// set PORTB.2 to output
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x04;	// turn LED initially off
  94:	85 b9       	out	0x05, r24	; 5
	TCCR0A = 0x02;	// timer0 to operate in CTC mode
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x05;	// set prescaler to 1024
  9a:	95 e0       	ldi	r25, 0x05	; 5
  9c:	95 bd       	out	0x25, r25	; 37
	OCR0A = 0xFF;	// load compare register value
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;	// interrupt enabled on compare match A
  a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();			// enable interrupts
  a6:	78 94       	sei
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x18>

000000aa <__vector_14>:
}

uint8_t Overflow = 0;	// initialize overflow variable

ISR (TIMER0_COMPA_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
	TCNT0 = 0;			// reset timer0 to 0 when interrupt occurs
  b6:	16 bc       	out	0x26, r1	; 38
	Overflow++;			// increment overflow variable
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	if (Overflow == 18)	// if statement to check for 18th overflow of timer0
  c2:	82 31       	cpi	r24, 0x12	; 18
  c4:	09 f4       	brne	.+2      	; 0xc8 <__vector_14+0x1e>
	{
		PORTB = 0x00;	// turns LED at PORTB.2 on
  c6:	15 b8       	out	0x05, r1	; 5
	}
	
	if (Overflow == 44)	// if statement to check for 44th overflow of timer0
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	8c 32       	cpi	r24, 0x2C	; 44
  ce:	21 f4       	brne	.+8      	; 0xd8 <__vector_14+0x2e>
	{
		PORTB = 0x04;	// turns LED off
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	85 b9       	out	0x05, r24	; 5
		Overflow = 0;	// resets overflow variable to 0
  d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
