
2C_1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024a  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main (void)
{
	uint8_t Overflow = 0;	// Declare overflow variable and initialize to 0
	DDRB = 0x04;		// Sets DDRB pin 2 to output mode
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x04;		// Sets PORTB pin 2 to high 
  84:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00;		// Sets DDRC pin 2 to input mode 
  86:	17 b8       	out	0x07, r1	; 7
	PORTC =0x04;		// Sets PORTC pin 2 to high 
  88:	88 b9       	out	0x08, r24	; 8
	
	TCCR0A = 0x00;			// Set timer0 to operate in normal mode
  8a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;			// Set prescaler to 1024
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
#include <avr/io.h>			// Including AVR and Delay header libraries
#include <util/delay.h>

int main (void)
{
	uint8_t Overflow = 0;	// Declare overflow variable and initialize to 0
  90:	80 e0       	ldi	r24, 0x00	; 0
		
		
		
		while ((TIFR0 & 0x01) == 0);	// check for overflow in overflow flag bit
		
				TIFR0 = 0x01;			// reset overflow flag
  92:	91 e0       	ldi	r25, 0x01	; 1
				Overflow++;				// increment overflow variable
			
				if (Overflow == 76)		// check for 76th overflow to achieve desired
											// delay of 1.250 seconds
				{
					PORTB = 0x04;		// turn the LED off after 1.250 seconds
  94:	24 e0       	ldi	r18, 0x04	; 4
	TCCR0B = 0x05;			// Set prescaler to 1024
	
	while (1)
	{		
			
		if (!(PINC & (1<<PINC2)))   // Check PINC for a value of 1 for a value of 1,
  96:	32 99       	sbic	0x06, 2	; 6
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x20>
										// complemented to check for a zero instead.
		{
			Overflow = 0;		// reset overflow variable to 0 when button pressed
			TCNT0 = 0x00;		// reset timer to 0 when button pressed
  9a:	16 bc       	out	0x26, r1	; 38
			PORTB = 0x00;		// Turn on LED by setting PORTB.2 to 0.
  9c:	15 b8       	out	0x05, r1	; 5
	{		
			
		if (!(PINC & (1<<PINC2)))   // Check PINC for a value of 1 for a value of 1,
										// complemented to check for a zero instead.
		{
			Overflow = 0;		// reset overflow variable to 0 when button pressed
  9e:	80 e0       	ldi	r24, 0x00	; 0
			PORTB = 0x00;		// Turn on LED by setting PORTB.2 to 0.
		}
		
		
		
		while ((TIFR0 & 0x01) == 0);	// check for overflow in overflow flag bit
  a0:	a8 9b       	sbis	0x15, 0	; 21
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x20>
		
				TIFR0 = 0x01;			// reset overflow flag
  a4:	95 bb       	out	0x15, r25	; 21
				Overflow++;				// increment overflow variable
  a6:	8f 5f       	subi	r24, 0xFF	; 255
			
				if (Overflow == 76)		// check for 76th overflow to achieve desired
  a8:	8c 34       	cpi	r24, 0x4C	; 76
  aa:	09 f4       	brne	.+2      	; 0xae <main+0x2e>
											// delay of 1.250 seconds
				{
					PORTB = 0x04;		// turn the LED off after 1.250 seconds
  ac:	25 b9       	out	0x05, r18	; 5
				}
				
			TCNT0 = 0;					// reset the timer
  ae:	16 bc       	out	0x26, r1	; 38
	}
  b0:	f2 cf       	rjmp	.-28     	; 0x96 <main+0x16>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
