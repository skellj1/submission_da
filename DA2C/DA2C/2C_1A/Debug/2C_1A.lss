
2C_1A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000230  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main(void)
{
	uint8_t Overflow = 0;	// declare overflow variable and initialize to 0
	DDRB = 0x04;	// set data direction reg. B to output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0;		// normal mode operation
  84:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;	// prescaler of 1024
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
    TCNT0 = 0x0;	// start the timer
  8a:	16 bc       	out	0x26, r1	; 38
    {
		// wait for the overflow event
		while ((TIFR0 & 0x01) == 0);
		
		TCNT0 = 0x00;	// reset timer0 to 0
		TIFR0 = 0x01;	// reset overflow flag 
  8c:	91 e0       	ldi	r25, 0x01	; 1
			PORTB = 0x00;		// sets PORTB.2 high (reverse logic, LED on)
		}
		
		if (Overflow == 44)		// if statement for 44th overflow of timer0
		{							// generate delay of 435 ms
			PORTB = 0x04;		// sets PORTB.2 low (LED off)
  8e:	24 e0       	ldi	r18, 0x04	; 4

#define F_CPU 16000000UL
#include <avr/io.h>

int main(void)
{
  90:	80 e0       	ldi	r24, 0x00	; 0
    TCNT0 = 0x0;	// start the timer
	
    while (1) 
    {
		// wait for the overflow event
		while ((TIFR0 & 0x01) == 0);
  92:	a8 9b       	sbis	0x15, 0	; 21
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x12>
		
		TCNT0 = 0x00;	// reset timer0 to 0
  96:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;	// reset overflow flag 
  98:	95 bb       	out	0x15, r25	; 21
		Overflow++;		// increment overflow variable
  9a:	8f 5f       	subi	r24, 0xFF	; 255
		
		if (Overflow == 18)		// if statement for 18th overflow of timer0
  9c:	82 31       	cpi	r24, 0x12	; 18
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x24>
		{							// generate delay of 290 ms
			PORTB = 0x00;		// sets PORTB.2 high (reverse logic, LED on)
  a0:	15 b8       	out	0x05, r1	; 5
  a2:	f7 cf       	rjmp	.-18     	; 0x92 <main+0x12>
		}
		
		if (Overflow == 44)		// if statement for 44th overflow of timer0
  a4:	8c 32       	cpi	r24, 0x2C	; 44
  a6:	a9 f7       	brne	.-22     	; 0x92 <main+0x12>
		{							// generate delay of 435 ms
			PORTB = 0x04;		// sets PORTB.2 low (LED off)
  a8:	25 b9       	out	0x05, r18	; 5
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main+0x10>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
