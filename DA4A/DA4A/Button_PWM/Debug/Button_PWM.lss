
Button_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000763  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068b  00000000  00000000  000009ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000315  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e6  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int button = 0;

int main(void)
{
	DDRD |= (1<<6);		// sets PD6 as output pin
  90:	56 9a       	sbi	0x0a, 6	; 10
	DDRB |= (1<<2);		// sets PortB.3 as output 
  92:	22 9a       	sbi	0x04, 2	; 4
	DDRC = 0x00;		// sets port C as input
  94:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;		// initially set portC high
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	88 b9       	out	0x08, r24	; 8
	
	TIMSK0 = 0x01;		// enable timer0 overflow interrupt
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();				// globally enables interrupts
  a0:	78 94       	sei
	
	TCCR0A = 0x00;		// set timer0 to operate in normal mode
  a2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;		// set prescaler to 1024
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	85 bd       	out	0x25, r24	; 37
	
	
	// Setup and enable ADC //
   ADMUX = (0<<REFS1)|    // Reference Selection Bits
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
   (0<<ADLAR)|    // ADC Left Adjust Result
   (0<<MUX2)|     // Analog Channel Selection Bits
   (0<<MUX1)|     // ADC0 (PC0) 
   (0<<MUX0);
   
   ADCSRA = (1<<ADEN)|    // ADC Enable
  ae:	82 e8       	ldi	r24, 0x82	; 130
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
   (0<<ADIE)|     // ADC Interrupt Enable
   (0<<ADPS2)|    // ADC Pre-scaler Select Bits
   (1<<ADPS1)|	  // scales output of ADC by 4
   (0<<ADPS0);
	
	TCNT0 = 0;
  b4:	16 bc       	out	0x26, r1	; 38
	
	while (1)
	{	
		ADCSRA|=(1<<ADSC);					// start conversion
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);   // wait for conversion to finish
  c0:	80 81       	ld	r24, Z
  c2:	84 ff       	sbrs	r24, 4
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <main+0x30>

		ADCSRA |= (1<<ADIF);	// reset interrupt flag
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
		
		if (!(PINC & (1<<PINC2)))	// if button 2 is pressed...
  cc:	32 99       	sbic	0x06, 2	; 6
  ce:	f5 cf       	rjmp	.-22     	; 0xba <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ec       	ldi	r24, 0xC3	; 195
  d4:	99 e0       	ldi	r25, 0x09	; 9
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x46>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x50>
  e0:	00 00       	nop
		{
			_delay_ms(200);			// delay for de-bouncing button
			button ^= 1;			// toggle button variable
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	82 27       	eor	r24, r18
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f6:	e1 cf       	rjmp	.-62     	; 0xba <main+0x2a>

000000f8 <__vector_16>:
		}
	}
}

ISR (TIMER0_OVF_vect)		  // timer0 overflow interrupt vector
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
	if (button == 1)
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	91 05       	cpc	r25, r1
 114:	29 f5       	brne	.+74     	; 0x160 <__vector_16+0x68>
	{	
		TCCR2A = (1<<COM2A0)|(1<<WGM21)|(1<<WGM20);	// Fast PWM, non-inverted
 116:	83 e4       	ldi	r24, 0x43	; 67
 118:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 		TCCR2B = (1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20);	// pre-scaler of 1024, toggle OC2A on compare match
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
		while (button == 1)
 122:	17 c0       	rjmp	.+46     	; 0x152 <__vector_16+0x5a>
		{
			PORTD |= (1<<MOTOR);   // turns on motor
 124:	5e 9a       	sbi	0x0b, 6	; 11
			PORTB |= (1<<PB3);   // turns on motor
 126:	2b 9a       	sbi	0x05, 3	; 5
			//int a = ADCH;
			//OCR2A = a;
			
			if (!(PINC & (1<<PINC2)))	// if button 2 is pressed...
 128:	32 99       	sbic	0x06, 2	; 6
 12a:	13 c0       	rjmp	.+38     	; 0x152 <__vector_16+0x5a>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	83 ec       	ldi	r24, 0xC3	; 195
 130:	99 e0       	ldi	r25, 0x09	; 9
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_16+0x3a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_16+0x44>
 13c:	00 00       	nop
			{
				_delay_ms(200);			// delay for de-bouncing button
				button ^= 1;				// toggle button variable
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	82 27       	eor	r24, r18
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (button == 1)
	{	
		TCCR2A = (1<<COM2A0)|(1<<WGM21)|(1<<WGM20);	// Fast PWM, non-inverted
 		TCCR2B = (1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20);	// pre-scaler of 1024, toggle OC2A on compare match
	
		while (button == 1)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	19 f3       	breq	.-58     	; 0x124 <__vector_16+0x2c>
 15e:	04 c0       	rjmp	.+8      	; 0x168 <__vector_16+0x70>
				button ^= 1;				// toggle button variable
			}
		}
	}
	
	else if (button == 0)
 160:	89 2b       	or	r24, r25
 162:	11 f4       	brne	.+4      	; 0x168 <__vector_16+0x70>
	{
		PORTD &= ~(1<<MOTOR);	  // turns off motor
 164:	5e 98       	cbi	0x0b, 6	; 11
		PORTB = 0;
 166:	15 b8       	out	0x05, r1	; 5
	}
	
	TCNT0 = 0;
 168:	16 bc       	out	0x26, r1	; 38
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
