
PWM_only.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061a  00000000  00000000  0000088f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{
	unsigned int a = 0;
	
	DDRB |= (1<<1);		// sets PortB.3 as output
  90:	21 9a       	sbi	0x04, 1	; 4
	DDRC &= ~(1<<0);	
  92:	38 98       	cbi	0x07, 0	; 7
	
	TCCR1A = (1<<COM1A1)|(1<<WGM11);			// clear on compare match
  94:	82 e8       	ldi	r24, 0x82	; 130
  96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS11);	// Fast PWM mode 14 timer1
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR1 = 9999;								// set top value for timer1
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	97 e2       	ldi	r25, 0x27	; 39
  a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(0<<ADIF)|     // ADC Interrupt Flag
	(0<<ADIE)|     // ADC Interrupt Enable
	(0<<ADPS2)|    // ADC Pre-scaler Select Bits
	(1<<ADPS1)|	  // scales output of ADC by 4
	(0<<ADPS0);*/
	DIDR0 |= (1<<ADC0D);
  ac:	ee e7       	ldi	r30, 0x7E	; 126
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	80 83       	st	Z, r24
	ADMUX |= 0;
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 83       	st	Z, r24
	ADCSRA = 0x87;
  be:	87 e8       	ldi	r24, 0x87	; 135
  c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0;
  c4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	
	while (1)
	{
		ADCSRA|=(1<<ADSC);					// start conversion
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);   // wait for conversion to finish
		
		a = (ADC & 0x3ff);
  cc:	48 e7       	ldi	r20, 0x78	; 120
  ce:	50 e0       	ldi	r21, 0x00	; 0
		a = a * 5; 
		OCR1A = 5000;
  d0:	c8 e8       	ldi	r28, 0x88	; 136
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	28 e8       	ldi	r18, 0x88	; 136
  d6:	33 e1       	ldi	r19, 0x13	; 19
		OCR1B = 0;
  d8:	6a e8       	ldi	r22, 0x8A	; 138
  da:	70 e0       	ldi	r23, 0x00	; 0
	ADCSRB = 0;
	
	
	while (1)
	{
		ADCSRA|=(1<<ADSC);					// start conversion
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);   // wait for conversion to finish
  e2:	80 81       	ld	r24, Z
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x52>
		
		a = (ADC & 0x3ff);
  e8:	da 01       	movw	r26, r20
  ea:	8d 91       	ld	r24, X+
  ec:	9c 91       	ld	r25, X
		a = a * 5; 
		OCR1A = 5000;
  ee:	39 83       	std	Y+1, r19	; 0x01
  f0:	28 83       	st	Y, r18
		OCR1B = 0;
  f2:	db 01       	movw	r26, r22
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	1c 92       	st	X, r1
  f8:	1e 92       	st	-X, r1
	}
  fa:	f0 cf       	rjmp	.-32     	; 0xdc <main+0x4c>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
