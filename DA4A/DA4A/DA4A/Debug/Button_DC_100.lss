
Button_DC_100.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000779  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f7  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000189b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
void LED_Sequence(void);

int main(void)
{	
	
	DDRD |= (1<<6);		// sets PD6 as output pin
  90:	56 9a       	sbi	0x0a, 6	; 10
	DDRC = 0x00;		// sets port C as input
  92:	17 b8       	out	0x07, r1	; 7
	DDRB = 0xFF;		// sets PORTB as output pin
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF;
  98:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x04;		// initially set portC.2 high
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	88 b9       	out	0x08, r24	; 8
	TIMSK0 = 0x01;		// enable timer0 overflow interrupt
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();				// globally enables interrupts
  a4:	78 94       	sei
	TCCR0A = 0x00;		// set timer0 to operate in normal mode
  a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;		// set pre-scaler to 1024
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	85 bd       	out	0x25, r24	; 37
	
	while (1)
	{
		if (!(PINC & (1<<PINC2)))	// if button is pressed...
  ac:	32 99       	sbic	0x06, 2	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	83 ec       	ldi	r24, 0xC3	; 195
  b4:	99 e0       	ldi	r25, 0x09	; 9
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x26>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x30>
  c0:	00 00       	nop
		{
			_delay_ms(200);			// delay for de-bouncing switch
			button ^= 1;			// toggle button variable
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	82 27       	eor	r24, r18
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d6:	ea cf       	rjmp	.-44     	; 0xac <main+0x1c>

000000d8 <__vector_16>:
		}
	}
}

ISR (TIMER0_OVF_vect)		  // timer0 overflow interrupt vector
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  
	if (button == 1)
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	11 f5       	brne	.+68     	; 0x13e <__vector_16+0x66>
  fa:	18 c0       	rjmp	.+48     	; 0x12c <__vector_16+0x54>
		{
			while (button == 1)
			{
				PORTD = 0b01000000;   // turns on motor
  fc:	3b b9       	out	0x0b, r19	; 11
				PORTB = 0b11000011;
  fe:	25 b9       	out	0x05, r18	; 5
				
				if (!(PINC & (1<<PINC2)))	// if button is pressed...
 100:	32 99       	sbic	0x06, 2	; 6
 102:	16 c0       	rjmp	.+44     	; 0x130 <__vector_16+0x58>
 104:	4f ef       	ldi	r20, 0xFF	; 255
 106:	83 ec       	ldi	r24, 0xC3	; 195
 108:	99 e0       	ldi	r25, 0x09	; 9
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <__vector_16+0x32>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__vector_16+0x3c>
 114:	00 00       	nop
					{
						_delay_ms(200);			// delay for de-bouncing switch
						button ^= 1;			// toggle button variable
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	84 27       	eor	r24, r20
 122:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__vector_16+0x58>
  
	if (button == 1)
		{
			while (button == 1)
			{
				PORTD = 0b01000000;   // turns on motor
 12c:	30 e4       	ldi	r19, 0x40	; 64
				PORTB = 0b11000011;
 12e:	23 ec       	ldi	r18, 0xC3	; 195
ISR (TIMER0_OVF_vect)		  // timer0 overflow interrupt vector
{
  
	if (button == 1)
		{
			while (button == 1)
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	01 f3       	breq	.-64     	; 0xfc <__vector_16+0x24>
 13c:	05 c0       	rjmp	.+10     	; 0x148 <__vector_16+0x70>
						button ^= 1;			// toggle button variable
					}
			}
		}
	
	else if (button == 0)
 13e:	89 2b       	or	r24, r25
 140:	19 f4       	brne	.+6      	; 0x148 <__vector_16+0x70>
		{
			PORTD = 0;			  // turns off motor
 142:	1b b8       	out	0x0b, r1	; 11
			PORTB = 0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	85 b9       	out	0x05, r24	; 5
		}
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
