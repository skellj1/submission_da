
Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab0  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000430  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b2  00000000  00000000  00001cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer_init>:
}

void timer_init(void)
{
	// Clear OC0A on compare match, CTC mode, prescaler 256
	TCCR0A |= (1<<COM0A1)|(1<<WGM01);
  80:	84 b5       	in	r24, 0x24	; 36
  82:	82 68       	ori	r24, 0x82	; 130
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);
  86:	85 b5       	in	r24, 0x25	; 37
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	85 bd       	out	0x25, r24	; 37
  8c:	08 95       	ret

0000008e <adc_init>:
}

void adc_init(void)
{
	ADCSRA |= ((1<<ADEN)|(1<<ADSC)|(1<<ADPS1)|(1<<ADPS0));
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	83 6c       	ori	r24, 0xC3	; 195
  96:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
  a2:	08 95       	ret

000000a4 <main>:
	
	while (1)
	{
		timer_init();      // initialize and set up timer to be used
		adc_init();        // initialize and set up ADC
		DDRB=0x0F;		   // Port B low bits to output
  a4:	1f e0       	ldi	r17, 0x0F	; 15
		OCR0A = ADC;	   // set value of ADC data registers as compare value for timer
  a6:	c8 e7       	ldi	r28, 0x78	; 120
  a8:	d0 e0       	ldi	r29, 0x00	; 0
			OCR0A = ADC;
		}
		else if ((OCR0A>150)&&(OCR0A<=200))
		{
			period=200;
			PORTB = 0x09;
  aa:	0f 2e       	mov	r0, r31
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	df 2e       	mov	r13, r31
  b0:	f0 2d       	mov	r31, r0
			_delay_ms(period);
			PORTB = 0x03;
  b2:	0f 2e       	mov	r0, r31
  b4:	f3 e0       	ldi	r31, 0x03	; 3
  b6:	ef 2e       	mov	r14, r31
  b8:	f0 2d       	mov	r31, r0
			_delay_ms(period);
			PORTB = 0x06;
  ba:	0f 2e       	mov	r0, r31
  bc:	f6 e0       	ldi	r31, 0x06	; 6
  be:	ff 2e       	mov	r15, r31
  c0:	f0 2d       	mov	r31, r0
			_delay_ms(period);
			PORTB = 0x0c;
  c2:	0c e0       	ldi	r16, 0x0C	; 12
{
	int period;    // integer used to set the period
	
	while (1)
	{
		timer_init();      // initialize and set up timer to be used
  c4:	0e 94 40 00 	call	0x80	; 0x80 <timer_init>
		adc_init();        // initialize and set up ADC
  c8:	0e 94 47 00 	call	0x8e	; 0x8e <adc_init>
		DDRB=0x0F;		   // Port B low bits to output
  cc:	14 b9       	out	0x04, r17	; 4
		OCR0A = ADC;	   // set value of ADC data registers as compare value for timer
  ce:	88 81       	ld	r24, Y
  d0:	99 81       	ldd	r25, Y+1	; 0x01
  d2:	87 bd       	out	0x27, r24	; 39
		// PORTB is set to (i.e. 0x09, 0x03, 0x06, and 0x0C) allow the motor to make steps
		// and rotate at a speed specified by the potentiometer. Since all of this is inside
		// the while(1) loop, the motor will keep spinning until OCR0A satisfies a different
		// condition, in which case the motor will spin at a different speed. 
		
		if ((OCR0A>=0)&&(OCR0A<=50))
  d4:	87 b5       	in	r24, 0x27	; 39
  d6:	87 b5       	in	r24, 0x27	; 39
  d8:	83 33       	cpi	r24, 0x33	; 51
  da:	00 f5       	brcc	.+64     	; 0x11c <main+0x78>
		{
			period =2 ;
			PORTB = 0x09;
  dc:	d5 b8       	out	0x05, r13	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	9f e1       	ldi	r25, 0x1F	; 31
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x44>
  e8:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x03;
  ea:	e5 b8       	out	0x05, r14	; 5
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9f e1       	ldi	r25, 0x1F	; 31
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x4c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x52>
  f6:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x06;
  f8:	f5 b8       	out	0x05, r15	; 5
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9f e1       	ldi	r25, 0x1F	; 31
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x5a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x60>
 104:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x0c;
 106:	05 b9       	out	0x05, r16	; 5
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9f e1       	ldi	r25, 0x1F	; 31
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x68>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x6e>
 112:	00 00       	nop
			_delay_ms(period);
			OCR0A = ADC;
 114:	88 81       	ld	r24, Y
 116:	99 81       	ldd	r25, Y+1	; 0x01
 118:	87 bd       	out	0x27, r24	; 39
 11a:	d4 cf       	rjmp	.-88     	; 0xc4 <main+0x20>
		}
		else if ((OCR0A>50)&&(OCR0A<=120))
 11c:	87 b5       	in	r24, 0x27	; 39
 11e:	83 33       	cpi	r24, 0x33	; 51
 120:	78 f1       	brcs	.+94     	; 0x180 <main+0xdc>
 122:	87 b5       	in	r24, 0x27	; 39
 124:	89 37       	cpi	r24, 0x79	; 121
 126:	60 f5       	brcc	.+88     	; 0x180 <main+0xdc>
		{
			period=30;
			PORTB = 0x09;
 128:	d5 b8       	out	0x05, r13	; 5
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	26 e7       	ldi	r18, 0x76	; 118
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	91 50       	subi	r25, 0x01	; 1
 132:	20 40       	sbci	r18, 0x00	; 0
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x8c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x96>
 13a:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x03;
 13c:	e5 b8       	out	0x05, r14	; 5
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	26 e7       	ldi	r18, 0x76	; 118
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	91 50       	subi	r25, 0x01	; 1
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xa0>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xaa>
 14e:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x06;
 150:	f5 b8       	out	0x05, r15	; 5
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	26 e7       	ldi	r18, 0x76	; 118
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	91 50       	subi	r25, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xb4>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xbe>
 162:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x0c;
 164:	05 b9       	out	0x05, r16	; 5
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	26 e7       	ldi	r18, 0x76	; 118
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	91 50       	subi	r25, 0x01	; 1
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0xc8>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xd2>
 176:	00 00       	nop
			_delay_ms(period);
			OCR0A = ADC;
 178:	88 81       	ld	r24, Y
 17a:	99 81       	ldd	r25, Y+1	; 0x01
 17c:	87 bd       	out	0x27, r24	; 39
 17e:	a2 cf       	rjmp	.-188    	; 0xc4 <main+0x20>
		}
		else if ((OCR0A>120)&&(OCR0A<=150))
 180:	87 b5       	in	r24, 0x27	; 39
 182:	89 37       	cpi	r24, 0x79	; 121
 184:	78 f1       	brcs	.+94     	; 0x1e4 <main+0x140>
 186:	87 b5       	in	r24, 0x27	; 39
 188:	87 39       	cpi	r24, 0x97	; 151
 18a:	60 f5       	brcc	.+88     	; 0x1e4 <main+0x140>
		{
			period=100;
			PORTB = 0x09;
 18c:	d5 b8       	out	0x05, r13	; 5
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	21 ee       	ldi	r18, 0xE1	; 225
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	91 50       	subi	r25, 0x01	; 1
 196:	20 40       	sbci	r18, 0x00	; 0
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xf0>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xfa>
 19e:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x03;
 1a0:	e5 b8       	out	0x05, r14	; 5
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	21 ee       	ldi	r18, 0xE1	; 225
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x104>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x10e>
 1b2:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x06;
 1b4:	f5 b8       	out	0x05, r15	; 5
 1b6:	9f ef       	ldi	r25, 0xFF	; 255
 1b8:	21 ee       	ldi	r18, 0xE1	; 225
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	91 50       	subi	r25, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x118>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x122>
 1c6:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x0c;
 1c8:	05 b9       	out	0x05, r16	; 5
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
 1cc:	21 ee       	ldi	r18, 0xE1	; 225
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	91 50       	subi	r25, 0x01	; 1
 1d2:	20 40       	sbci	r18, 0x00	; 0
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x12c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x136>
 1da:	00 00       	nop
			_delay_ms(period);
			OCR0A = ADC;
 1dc:	88 81       	ld	r24, Y
 1de:	99 81       	ldd	r25, Y+1	; 0x01
 1e0:	87 bd       	out	0x27, r24	; 39
 1e2:	70 cf       	rjmp	.-288    	; 0xc4 <main+0x20>
		}
		else if ((OCR0A>150)&&(OCR0A<=200))
 1e4:	87 b5       	in	r24, 0x27	; 39
 1e6:	87 39       	cpi	r24, 0x97	; 151
 1e8:	78 f1       	brcs	.+94     	; 0x248 <main+0x1a4>
 1ea:	87 b5       	in	r24, 0x27	; 39
 1ec:	89 3c       	cpi	r24, 0xC9	; 201
 1ee:	60 f5       	brcc	.+88     	; 0x248 <main+0x1a4>
		{
			period=200;
			PORTB = 0x09;
 1f0:	d5 b8       	out	0x05, r13	; 5
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
 1f4:	23 ec       	ldi	r18, 0xC3	; 195
 1f6:	89 e0       	ldi	r24, 0x09	; 9
 1f8:	91 50       	subi	r25, 0x01	; 1
 1fa:	20 40       	sbci	r18, 0x00	; 0
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x154>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x15e>
 202:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x03;
 204:	e5 b8       	out	0x05, r14	; 5
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	23 ec       	ldi	r18, 0xC3	; 195
 20a:	89 e0       	ldi	r24, 0x09	; 9
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x168>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x172>
 216:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x06;
 218:	f5 b8       	out	0x05, r15	; 5
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	23 ec       	ldi	r18, 0xC3	; 195
 21e:	89 e0       	ldi	r24, 0x09	; 9
 220:	91 50       	subi	r25, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x17c>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x186>
 22a:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x0c;
 22c:	05 b9       	out	0x05, r16	; 5
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	23 ec       	ldi	r18, 0xC3	; 195
 232:	89 e0       	ldi	r24, 0x09	; 9
 234:	91 50       	subi	r25, 0x01	; 1
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x190>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x19a>
 23e:	00 00       	nop
			_delay_ms(period);
			OCR0A = ADC;
 240:	88 81       	ld	r24, Y
 242:	99 81       	ldd	r25, Y+1	; 0x01
 244:	87 bd       	out	0x27, r24	; 39
 246:	3e cf       	rjmp	.-388    	; 0xc4 <main+0x20>
		}
		else if (OCR0A>200)
 248:	87 b5       	in	r24, 0x27	; 39
 24a:	89 3c       	cpi	r24, 0xC9	; 201
 24c:	08 f4       	brcc	.+2      	; 0x250 <main+0x1ac>
 24e:	3a cf       	rjmp	.-396    	; 0xc4 <main+0x20>
		{
			PORTB = 0;
 250:	15 b8       	out	0x05, r1	; 5
			OCR0A = ADC;
 252:	88 81       	ld	r24, Y
 254:	99 81       	ldd	r25, Y+1	; 0x01
 256:	87 bd       	out	0x27, r24	; 39
 258:	35 cf       	rjmp	.-406    	; 0xc4 <main+0x20>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
